version: '3.4'

networks:
  connectivity:
    external:
      name: connectivity
  drone:
    driver: overlay

volumes:
  drone-server:
    driver: local
    driver_opts:
      type: nfs
      o: addr=nas.hutter.cloud,rw,nolock,async
      device: ":/volume1/docker/drone-server"
  drone-traefik:
    driver: local
    driver_opts:
      type: nfs
      o: addr=nas.hutter.cloud,rw,nolock,async
      device: ":/volume1/docker/drone-traefik"

secrets:
  aws-key:
    file: ./secrets/aws-key
  aws-secret:
    file: ./secrets/aws-secret
  drone-secret:
    file: ./secrets/drone-secret
  github-client:
    file: ./secrets/github-client
  github-secret:
    file: ./secrets/github-secret
  swarm-ca:
    file: ./secrets/swarm-ca
  swarm-key:
    file: ./secrets/swarm-key
  swarm-cert:
    file: ./secrets/swarm-cert

services:
  traefik:
    image:  sebastianhutter/traefik:drone
    networks:
      - connectivity
      - drone
    environment:
      AWS_REGION: eu-central-1
      AWS_HOSTED_ZONE_ID: Z3CBRYU3UXXFKT
    ports:
      - 8443:8443/tcp
      - 12000:8080/tcp
    volumes:
      - drone-traefik:/acme
    secrets:
      - aws-key
      - aws-secret
      - swarm-ca
      - swarm-cert
      - swarm-key
    command: --constraints="tag==drone"

  server:
    image: sebastianhutter/drone-server:latest
    volumes:
      - drone-server:/var/lib/drone/
    environment:
      DRONE_OPEN: "true"
      DRONE_HOST: https://drone.hutter.cloud:8443
      DRONE_GITHUB: "true"
      DRONE_GITHUB_CLIENT: /run/secrets/github-client
      DRONE_GITHUB_SECRET: /run/secrets/github-secret
      DRONE_SECRET: /run/secrets/drone-secret
      DRONE_DEBUG: "true"
    networks:
      - drone
    secrets:  
      - github-client
      - github-secret
      - drone-secret
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.tags=drone"
        - "traefik.backend=drone-server"
        - "traefik.frontend.entryPoints=https"
        - "traefik.frontend.rule=Host:drone.hutter.cloud"
        - "traefik.protocol=http"
        - "traefik.docker.network=drone"
        - "traefik.port=8000"
      endpoint_mode: dnsrr
      mode: replicated
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        order: start-first
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3    

# https://discourse.drone.io/t/solved-how-to-get-drone-working-in-docker-swarm-mode-with-docker-stack-deploy/1166/15
  agent:
    image: sebastianhutter/drone-agent:latest
    depends_on:
      - server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      DRONE_SERVER: drone_server:9000
      DRONE_SECRET: /run/secrets/drone-secret
      DRONE_DEBUG: "true"
    networks:
      - drone
    secrets:
      - drone-secret
    deploy:
      endpoint_mode: dnsrr
      mode: replicated
      replicas: 6
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        order: start-first
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
